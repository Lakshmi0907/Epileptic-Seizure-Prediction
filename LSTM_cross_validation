 from keras.layers import Dense, Dropout, LSTM, Embedding
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
# define contrived series
import numpy as np
import tensorflow as tf
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from keras.optimizers import RMSprop
from keras.wrappers.scikit_learn import KerasClassifier
from keras.optimizers import Adam
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

df=pd.read_csv("/content/data.csv")
# df
# print(df)
datalist = df.values
inputs = datalist[:, :-1]
output = datalist[:, -1]
le = preprocessing.LabelEncoder()
output=le.fit_transform(output)

std_scale = preprocessing.StandardScaler().fit(inputs)
inputd = std_scale.transform(inputs)

train_inputs, test_inputs, train_output, test_output = train_test_split(inputd, output, test_size=0.30)
train_inputs_tf = tf.convert_to_tensor(train_inputs, np.float32)


train_output_tf = tf.convert_to_tensor(train_output)

#5 Convert the test input and output numpy.ndarray to tensorflow object
test_inputs_tf = tf.convert_to_tensor(test_inputs, np.float32)
test_output_tf = tf.convert_to_tensor(train_output)
ts=train_inputs.shape
tss=test_inputs.shape
l=inputd.shape
inputdd = inputd.reshape(l[0],1,l[1])
train_output_tf = train_output.reshape(ts[0],1,1)
outputdd = output.reshape(l[0],1,1)


# MLP for Pima Indians Dataset with 10-fold cross validation
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import StratifiedKFold
import numpy
# fix random seed for reproducibility
seed = 7
prdt=[]
numpy.random.seed(seed)

# define 10-fold cross validation test harness
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)
cvscores = []
for train, test in kfold.split(inputd, output):
  # create model
  model = Sequential()
  model.add(LSTM(256,return_sequences=True))
  model.add(Dropout(0.5))
  model.add(LSTM(128,return_sequences=True))
  model.add(Dropout(0.5))
  model.add(LSTM(64,return_sequences=True))
  model.add(Dropout(0.5))
  model.add(LSTM(32,return_sequences=True))
  model.add(Dropout(0.5))
  model.add(Dense(1, activation='sigmoid'))
  model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])
  hist=model.fit(inputdd[train], outputdd[train], epochs=10, batch_size=128, verbose=2)
  scores=model.predict_classes(inputdd[test])
  l=len(test)
  for p in range(l):
    t=outputdd[test][p][0]
    tst.append(t[0])
    tp=scores[p][0]
    prdt.append(tp[0])
    
import tensorflow as tf 
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
# cf_matrix = confusion_matrix(y_test,pred_cls)

accuracy = accuracy_score(tst,prdt)
print("Accuracy: %f" % accuracy)
precision = precision_score(tst,prdt)
print("Precision: %f" % precision)
recall = recall_score(tst,prdt)
print("Recall: %f" % recall)
f1 = f1_score(tst,prdt)
print("F1_score: %f" % f1)
